// LICENSE : MIT
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFixerFormatterList = exports.createFormatter = exports.loadFormatter = exports.dynamicImport = void 0;
const module_interop_1 = require("@textlint/module-interop");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const debug_1 = __importDefault(require("debug"));
// @ts-expect-error
const try_resolve_1 = __importDefault(require("try-resolve"));
const node_url_1 = require("node:url");
const isFile = (filePath) => {
    try {
        return fs_1.default.statSync(filePath).isFile();
    }
    catch (_a) {
        return false;
    }
};
// import() can not load Window file path
// convert file path to file URL before import()
// https://github.com/nodejs/node/issues/31710
async function dynamicImport(targetPath) {
    const fileUrl = (0, node_url_1.pathToFileURL)(targetPath).href;
    return import(fileUrl);
}
exports.dynamicImport = dynamicImport;
const debug = (0, debug_1.default)("textlint:textfix-formatter");
async function loadFormatter(formatterConfig) {
    const formatterName = formatterConfig.formatterName;
    debug(`formatterName: ${formatterName}`);
    let formatter;
    let formatterPath;
    if (fs_1.default.existsSync(formatterName)) {
        formatterPath = formatterName;
    }
    else if (fs_1.default.existsSync(path_1.default.resolve(process.cwd(), formatterName))) {
        formatterPath = path_1.default.resolve(process.cwd(), formatterName);
    }
    else {
        if (isFile(`${path_1.default.join(__dirname, "formatters/", formatterName)}.js`)) {
            formatterPath = `${path_1.default.join(__dirname, "formatters/", formatterName)}.js`;
        }
        else if (isFile(`${path_1.default.join(__dirname, "formatters/", formatterName)}.ts`)) {
            formatterPath = `${path_1.default.join(__dirname, "formatters/", formatterName)}.ts`;
        }
        else {
            const pkgPath = (0, try_resolve_1.default)(`textlint-formatter-${formatterName}`) || (0, try_resolve_1.default)(formatterName);
            if (pkgPath) {
                formatterPath = pkgPath;
            }
        }
    }
    try {
        const moduleExports = (await dynamicImport(formatterPath)).default;
        formatter = (0, module_interop_1.moduleInterop)(moduleExports);
    }
    catch (ex) {
        throw new Error(`Could not find formatter ${formatterName}
See https://github.com/textlint/textlint/issues/148
${ex}`);
    }
    debug(`use formatter: ${formatterPath}`);
    return {
        format(results) {
            return formatter(results, formatterConfig);
        }
    };
}
exports.loadFormatter = loadFormatter;
/**
 * @deprecated use loadFormatter
 * @param formatterConfig
 */
function createFormatter(formatterConfig) {
    const formatterName = formatterConfig.formatterName;
    debug(`formatterName: ${formatterName}`);
    let formatter;
    let formatterPath;
    if (fs_1.default.existsSync(formatterName)) {
        formatterPath = formatterName;
    }
    else if (fs_1.default.existsSync(path_1.default.resolve(process.cwd(), formatterName))) {
        formatterPath = path_1.default.resolve(process.cwd(), formatterName);
    }
    else {
        if (isFile(`${path_1.default.join(__dirname, "formatters/", formatterName)}.js`)) {
            formatterPath = `${path_1.default.join(__dirname, "formatters/", formatterName)}.js`;
        }
        else if (isFile(`${path_1.default.join(__dirname, "formatters/", formatterName)}.ts`)) {
            formatterPath = `${path_1.default.join(__dirname, "formatters/", formatterName)}.ts`;
        }
        else {
            const pkgPath = (0, try_resolve_1.default)(`textlint-formatter-${formatterName}`) || (0, try_resolve_1.default)(formatterName);
            if (pkgPath) {
                formatterPath = pkgPath;
            }
        }
    }
    try {
        formatter = (0, module_interop_1.moduleInterop)(require(formatterPath));
    }
    catch (ex) {
        throw new Error(`Could not find formatter ${formatterName}
See https://github.com/textlint/textlint/issues/148
${ex}`);
    }
    debug(`use formatter: ${formatterPath}`);
    return function (results) {
        return formatter(results, formatterConfig);
    };
}
exports.createFormatter = createFormatter;
function getFixerFormatterList() {
    return fs_1.default
        .readdirSync(path_1.default.join(__dirname, "formatters"))
        .filter((file) => {
        const fileName = path_1.default.extname(file);
        return fileName === ".js" || (fileName === ".ts" && !file.endsWith("d.ts"));
    })
        .map((file) => {
        return { name: path_1.default.basename(file, path_1.default.extname(file)) };
    });
}
exports.getFixerFormatterList = getFixerFormatterList;
//# sourceMappingURL=index.js.map