"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadFromDirAsESM = exports.loadFromDir = exports.dynamicImport = void 0;
const module_interop_1 = require("@textlint/module-interop");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const node_url_1 = require("node:url");
// import() can not load Window file path
// convert file path to file URL before import()
// https://github.com/nodejs/node/issues/31710
async function dynamicImport(targetPath) {
    const fileUrl = (0, node_url_1.pathToFileURL)(targetPath).href;
    return import(fileUrl);
}
exports.dynamicImport = dynamicImport;
/**
 * Load all rule modules from specified directory.
 * These are filtered by [extname]
 * @param {String} [rulesDir] Path to rules directory, may be relative. Defaults to `lib/rules`.
 * @param {String | String[]} [extnames] extension names
 * @returns {Object} Loaded rule modules by rule ids (file names).
 */
function loadFromDir(rulesDir, extnames = [".js", ".ts"]) {
    let rulesDirAbsolutePath;
    if (!rulesDir) {
        rulesDirAbsolutePath = path.join(__dirname, "rules");
    }
    else {
        rulesDirAbsolutePath = path.resolve(process.cwd(), rulesDir);
    }
    const rules = Object.create(null);
    fs.readdirSync(rulesDirAbsolutePath).forEach((file) => {
        if (Array.isArray(extnames)) {
            if (!extnames.includes(path.extname(file))) {
                return;
            }
        }
        else {
            if (path.extname(file) !== extnames) {
                return;
            }
        }
        const withoutExt = path.basename(file, path.extname(file));
        rules[withoutExt] = (0, module_interop_1.moduleInterop)(require(path.join(rulesDirAbsolutePath, file)));
    });
    return rules;
}
exports.loadFromDir = loadFromDir;
async function loadFromDirAsESM(rulesDir, extnames = [".js", ".ts"]) {
    let rulesDirAbsolutePath;
    if (!rulesDir) {
        rulesDirAbsolutePath = path.join(__dirname, "rules");
    }
    else {
        rulesDirAbsolutePath = path.resolve(process.cwd(), rulesDir);
    }
    const files = await fs.promises.readdir(rulesDirAbsolutePath);
    const ruleFiles = files.filter((file) => {
        if (Array.isArray(extnames)) {
            if (!extnames.includes(path.extname(file))) {
                return false;
            }
        }
        else {
            if (path.extname(file) !== extnames) {
                return false;
            }
        }
        return true;
    });
    return Promise.all(ruleFiles.map(async (ruleFile) => {
        const withoutExt = path.basename(ruleFile, path.extname(ruleFile));
        const mod = await dynamicImport(path.join(rulesDirAbsolutePath, ruleFile));
        const ruleModule = (0, module_interop_1.moduleInterop)(mod.default);
        const ret = {
            rule: ruleModule,
            ruleId: withoutExt,
            options: true
        };
        return ret;
    }));
}
exports.loadFromDirAsESM = loadFromDirAsESM;
//# sourceMappingURL=rule-loader.js.map